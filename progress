#!/usr/bin/env python
import os
import logging
import time
import signal
from typing import Any
from stat import S_ISREG, S_ISBLK
import click
from engineering_notation import to_si

class Columns:
    """
    Stores the widths of columns
    """
    def __init__(self) -> None:
        self.widths: list[int] = []

class Row:
    """
    As we call .pad_left and .pad_right to add columns, update the `columns`
    object to remember the widest each column has been

    """

    def __init__(self, columns: Columns) -> None:
        self.columns = columns
        self.column = 0

    def get_width(self, width: int) -> int:
        widths = self.columns.widths
        if len(widths) <= self.column:
            widths.extend([1] * (self.column + 1 - len(widths)))
        if widths[self.column] < width:
            widths[self.column] = width
        else:
            width = widths[self.column]
        self.column += 1
        return width

    def pad_left(self, value: Any) -> str:
        text = str(value)
        pads = self.get_width(len(text)) - len(text)
        return text + ' ' * pads

    def pad_right(self, value: Any) -> str:
        text = str(value)
        pads = self.get_width(len(text)) - len(text)
        return ' ' * pads + text

def put(fmt: str, **kwargs: Any) -> None:
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    message = fmt.format(**kwargs)
    print(f'\r{timestamp} {message}')

class File:
    def __init__(self, name: str, pos: int, size: int, timestamp: float) -> None:
        self.name = name
        self.pos = pos
        self.size = size
        self.timestamp = timestamp
        self.first_pos = pos
        self.first_size = size
        self.first_timestamp = timestamp
        self.shown = False

Fds = dict[tuple[str, int, int], File]

class Process:
    def __init__(self, command: str, fds: Fds) -> None:
        self.command = command
        self.fds = fds

Procs = dict[int, Process]

def get_procs() -> Procs:
    procs: Procs = {}
    timestamp = time.time()
    for pid in os.listdir('.'):
        if not pid[0].isdigit():
            continue
        logging.debug('== %s ==', pid)

        fddir = pid + '/fd/'
        try:
            fds = os.listdir(fddir)
        except OSError as exc:
            logging.debug('skip %s %s', pid, exc)
            continue

        try:
            with open(f'{pid}/comm', encoding='utf-8') as f:
                command = f.read().rstrip('\n')
        except IOError as exc:
            logging.debug('skip %s %s', pid, exc)
            continue

        fdmap = {}
        for fd in fds:
            try:
                fdfile = fddir + fd
                st = os.stat(fdfile)
                logging.debug('fd %s %s', fd, st)

                if not (S_ISREG(st.st_mode) or not S_ISBLK(st.st_mode)):
                    logging.debug('not regular or block %s', fd)
                    continue

                name = os.readlink(fdfile)
                logging.debug('name %s', name)

                size = st.st_size
                pos = 0
                with open(f'{pid}/fdinfo/{fd}', 'rt', encoding='utf-8') as f:
                    for line in f:
                        logging.debug('fdinfo: %r', line)
                        if line.startswith('pos:'):
                            pos = int(line[4:])
                            break
                logging.debug('pos %s of %s', pos, size)

                fdmap[fd, st.st_dev, st.st_ino] = \
                    File(name=name, pos=pos, size=size, timestamp=timestamp)

            except OSError as exc:
                logging.debug('skip %s %s %s', pid, fd, exc)

        procs[int(pid)] = Process(command=command, fds=fdmap)
    return procs

def percentage(n: int, d: int) -> str:
    """
    Returns a string like '12.3%' from numerator N and denominator D
    """
    if d == 0:
        return '-'
    per = 100.0 * n / d
    r = f'{per:.1f}%'
    if r == '100.0%':
        r = '100%'
    return r

def compare_proc(columns: Columns, then_proc: Process, now_proc: Process) -> None:
    for (fd, dev, ino), now_fd in now_proc.fds.items():
        then_fd = then_proc.fds.pop((fd, dev, ino), None)
        if not then_fd:
            continue
        now_fd.first_pos = then_fd.first_pos
        now_fd.first_size = then_fd.first_size
        now_fd.first_timestamp = then_fd.first_timestamp
        now_fd.shown = then_fd.shown
        if now_fd.size == 0 and then_fd.size == 0:
            continue
        if now_fd.pos == then_fd.pos:
            continue
        now_fd.shown = True

        rate = '-'
        more_time = '-'
        elapsed = now_fd.timestamp - now_fd.first_timestamp
        if elapsed != 0:
            bytes_per_sec = (now_fd.pos - now_fd.first_pos) / elapsed
            if bytes_per_sec > 0:
                rate = to_si(bytes_per_sec) + 'B/s'
                more_bytes = now_fd.size - now_fd.pos
                if more_bytes > 0:
                    s = int(more_bytes / bytes_per_sec)
                    more_time = f'{s // 60:d}:{s % 60:02d}'

        if now_fd.pos == now_fd.size:
            continue

        row = Row(columns)
        put('{perc} {pos} / {size} {rate} {more_time} {name} [{command}]',
            perc=row.pad_right(percentage(now_fd.pos, now_fd.size)),
            pos=row.pad_right(to_si(now_fd.pos)),
            size=row.pad_left(to_si(now_fd.size)),
            rate=row.pad_right(rate),
            more_time=row.pad_right(more_time),
            name=os.path.basename(now_fd.name),
            command=now_proc.command)

    # Any FDs still in then_proc have been closed.
    for (fd, dev, ino), then_fd in then_proc.fds.items():
        if then_fd.shown:
            put('CLOSED - {name} [{command}]',
                name=os.path.basename(then_fd.name),
                command=then_proc.command)

def compare_procs(columns: Columns, then_procs: Procs, now_procs: Procs) -> None:
    for pid, now_proc in now_procs.items():
        then_proc = then_procs.pop(pid, None)
        if then_proc:
            compare_proc(columns, then_proc, now_proc)

    # Any processes still in then_procs no longer exist.
    # Check for FDs that we previously reported but are now gone.
    for pid, then_proc in then_procs.items():
        for _, then_fd in then_proc.fds.items():
            if then_fd.shown:
                put('CLOSED - {name} [{command}]',
                    name=os.path.basename(then_fd.name),
                    command=then_proc.command)

# Inspired by https://github.com/Xfennec/progress/

@click.command()
@click.option('--seconds', '-s', metavar='N', default=2, show_default=True,
              help='Time between polls')
def main(seconds: int) -> None:
    """
    Watch processes as they progress through file I/O operations.
    """

    # Don't catch SIGINT to generate KeyboardInterrupt.
    signal.signal(signal.SIGINT, signal.SIG_DFL)

    os.chdir('/proc')

    columns = Columns()
    sleep = float(seconds)
    now_procs = get_procs()
    while True:
        time.sleep(sleep)
        then_procs = now_procs
        now_procs = get_procs()
        compare_procs(columns, then_procs, now_procs)

if __name__ == '__main__':
    main()                      # pylint: disable=no-value-for-parameter
